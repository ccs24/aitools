{"version":3,"file":"cluster_manager.min.js","sources":["../src/cluster_manager.js"],"sourcesContent":["/**\n * Cluster Management JavaScript\n * \n * Handles cluster CRUD operations, filtering, and UI interactions\n * Uses Tabulator.js from mod_valuemapdoc module\n */\ndefine([\n    'aitoolsub_cluster/tabulatorlib',\n    'jquery', \n    'core/ajax', \n    'core/notification'\n], function(\n    Tabulator,\n    $, \n    Ajax, \n    Notification\n) {\n    \n    var ClusterManager = {\n        \n        // Configuration\n        config: {\n            contextid: 0,\n            wwwroot: '',\n            sesskey: '',\n            userid: 0\n        },\n        \n        // Data tables\n        clustersTable: null,\n        \n        // Data cache\n        valuemapData: {},\n        currentCluster: null,\n        \n        /**\n         * Initialize the cluster manager\n         */\n        init: function() {\n            console.log('ClusterManager: Initializing...');\n            \n            // Get configuration from window object\n            if (window.ClusterConfig) {\n                this.config = window.ClusterConfig;\n            }\n            \n            // Initialize components\n            this.initEventHandlers();\n            this.loadValueMapData();\n            this.initClustersTable();\n            this.loadStats();\n            \n            console.log('ClusterManager: Initialized successfully');\n        },\n        \n        /**\n         * Initialize event handlers\n         */\n        initEventHandlers: function() {\n            var self = this;\n            \n            // Create cluster button\n            $('#create-cluster-btn, #create-first-cluster-btn').on('click', function() {\n                self.showCreateClusterModal();\n            });\n            \n            // Filter controls\n            $('#status-filter, #market-filter').on('change', function() {\n                self.applyFilters();\n            });\n            \n            $('#search-input').on('input', this.debounce(function() {\n                self.applyFilters();\n            }, 500));\n            \n            // Clear filters\n            $('#clear-filters-btn').on('click', function() {\n                self.clearFilters();\n            });\n            \n            // View mode toggle\n            $('input[name=\"view-mode\"]').on('change', function() {\n                self.toggleViewMode($(this).attr('id'));\n            });\n            \n            // Cluster form submission\n            $('#cluster-form').on('submit', function(e) {\n                e.preventDefault();\n                self.saveCluster();\n            });\n            \n            // Refresh markets button\n            $('#refresh-markets-btn').on('click', function() {\n                self.loadValueMapData(true);\n            });\n        },\n        \n        /**\n         * Load ValueMapDoc data for dropdowns\n         */\n        loadValueMapData: function(forceRefresh) {\n            var self = this;\n            \n            if (!forceRefresh && Object.keys(this.valuemapData).length > 0) {\n                this.populateDropdowns();\n                return;\n            }\n            \n            console.log('ClusterManager: Loading ValueMapDoc data...');\n            \n            var request = {\n                methodname: 'aitoolsub_cluster_get_valuemap_data',\n                args: {\n                    fields: ['market', 'industry', 'role'],\n                    search: '',\n                    limit: 100\n                }\n            };\n            \n            Ajax.call([request])[0]\n                .done(function(response) {\n                    console.log('ClusterManager: ValueMapDoc data loaded', response);\n                    \n                    // Check for error in response\n                    if (response.error) {\n                        console.warn('ClusterManager: ValueMapDoc error:', response.error);\n                        Notification.addNotification({\n                            message: 'ValueMapDoc warning: ' + response.error,\n                            type: 'warning'\n                        });\n                        // Continue with empty data\n                        self.valuemapData = { fields: {}, context_data: [], statistics: {} };\n                    } else {\n                        self.valuemapData = response;\n                    }\n                    \n                    self.populateDropdowns();\n                })\n                .fail(function(error) {\n                    console.error('ClusterManager: Error loading ValueMapDoc data', error);\n                    \n                    // Set empty data to prevent further errors\n                    self.valuemapData = { fields: {}, context_data: [], statistics: {} };\n                    self.populateDropdowns();\n                    \n                    // Show user-friendly error\n                    Notification.addNotification({\n                        message: 'Could not load market data. You can still type custom values.',\n                        type: 'warning'\n                    });\n                });\n        },\n        \n        /**\n         * Populate dropdown lists with ValueMapDoc data\n         */\n        populateDropdowns: function() {\n            console.log('ClusterManager: Populating dropdowns...');\n            \n            // Market filter dropdown\n            var marketFilter = $('#market-filter');\n            marketFilter.empty().append('<option value=\"\">All Markets</option>');\n            \n            // Cluster modal market dropdown\n            var clusterMarket = $('#cluster-market');\n            clusterMarket.empty().append('<option value=\"\">Select or type custom market...</option>');\n            \n            if (this.valuemapData.fields && this.valuemapData.fields.market) {\n                this.valuemapData.fields.market.forEach(function(item) {\n                    var option = $('<option></option>')\n                        .attr('value', item.value)\n                        .text(item.display);\n                    \n                    marketFilter.append(option.clone());\n                    clusterMarket.append(option.clone());\n                });\n            }\n            \n            // Make cluster market dropdown editable\n            this.makeSelectEditable('#cluster-market');\n        },\n        \n        /**\n         * Make select dropdown editable (allow custom values)\n         */\n        makeSelectEditable: function(selector) {\n            var $select = $(selector);\n            var $wrapper = $('<div class=\"editable-select-wrapper\"></div>');\n            var $input = $('<input type=\"text\" class=\"form-control editable-select-input\">');\n            \n            $select.wrap($wrapper);\n            $select.after($input);\n            \n            // Show input when \"other\" is needed\n            $select.on('change', function() {\n                if ($(this).val() === '' || $(this).find('option:selected').length === 0) {\n                    $input.show().focus();\n                    $select.hide();\n                }\n            });\n            \n            // Show select when input loses focus\n            $input.on('blur', function() {\n                if ($(this).val().trim() === '') {\n                    $input.hide();\n                    $select.show();\n                } else {\n                    // Add custom option if not exists\n                    var customValue = $(this).val().trim();\n                    if ($select.find('option[value=\"' + customValue + '\"]').length === 0) {\n                        $select.append($('<option></option>')\n                            .attr('value', customValue)\n                            .text(customValue + ' (custom)'));\n                    }\n                    $select.val(customValue);\n                }\n            });\n            \n            $input.hide();\n        },\n        \n        /**\n         * Initialize clusters table with Tabulator\n         */\n        initClustersTable: function() {\n            var self = this;\n            \n            console.log('ClusterManager: Initializing clusters table...');\n            \n            if (typeof Tabulator === 'undefined') {\n                console.error('ClusterManager: Tabulator not loaded, using simple table');\n                this.loadClustersSimple();\n                return;\n            }\n            \n            this.clustersTable = new Tabulator(\"#clusters-table\", {\n                height: 500,\n                layout: \"fitColumns\",\n                placeholder: \"No clusters found\",\n                pagination: \"local\",\n                paginationSize: 25,\n                paginationSizeSelector: [10, 25, 50, 100],\n                movableColumns: true,\n                resizableRows: true,\n                responsiveLayout: \"hide\",\n                columns: [\n                    {\n                        title: \"Name\", \n                        field: \"name\", \n                        width: 200,\n                        headerFilter: \"input\",\n                        formatter: function(cell) {\n                            var data = cell.getData();\n                            var html = '<strong>' + data.name + '</strong>';\n                            if (data.description) {\n                                html += '<br><small class=\"text-muted\">' + \n                                       data.description.substring(0, 60) + \n                                       (data.description.length > 60 ? '...' : '') + '</small>';\n                            }\n                            return html;\n                        }\n                    },\n                    {\n                        title: \"Market\", \n                        field: \"market\", \n                        width: 150,\n                        headerFilter: \"select\",\n                        headerFilterParams: {\n                            values: true\n                        }\n                    },\n                    {\n                        title: \"Status\", \n                        field: \"status\", \n                        width: 120,\n                        headerFilter: \"select\",\n                        headerFilterParams: {\n                            \"\": \"All\",\n                            \"planning\": \"Planning\",\n                            \"active\": \"Active\", \n                            \"paused\": \"Paused\",\n                            \"completed\": \"Completed\"\n                        },\n                        formatter: function(cell) {\n                            var status = cell.getValue();\n                            var badges = {\n                                'planning': 'secondary',\n                                'active': 'success',\n                                'paused': 'warning',\n                                'completed': 'info'\n                            };\n                            return '<span class=\"badge bg-' + badges[status] + '\">' + \n                                   status.charAt(0).toUpperCase() + status.slice(1) + '</span>';\n                        }\n                    },\n                    {\n                        title: \"Companies\", \n                        field: \"company_count\", \n                        width: 100,\n                        hozAlign: \"center\",\n                        formatter: function(cell) {\n                            return '<span class=\"badge bg-info\">' + cell.getValue() + '</span>';\n                        }\n                    },\n                    {\n                        title: \"Contacts\", \n                        field: \"person_count\", \n                        width: 100,\n                        hozAlign: \"center\",\n                        formatter: function(cell) {\n                            return '<span class=\"badge bg-warning\">' + cell.getValue() + '</span>';\n                        }\n                    },\n                    {\n                        title: \"Messages\", \n                        field: \"message_count\", \n                        width: 100,\n                        hozAlign: \"center\",\n                        formatter: function(cell) {\n                            return '<span class=\"badge bg-primary\">' + cell.getValue() + '</span>';\n                        }\n                    },\n                    {\n                        title: \"Modified\", \n                        field: \"modified_date\", \n                        width: 120,\n                        formatter: function(cell) {\n                            return self.formatDate(cell.getValue());\n                        }\n                    },\n                    {\n                        title: \"Actions\", \n                        field: \"actions\", \n                        width: 200,\n                        hozAlign: \"center\",\n                        headerSort: false,\n                        formatter: function(cell) {\n                            var data = cell.getData();\n                            return self.renderActionButtons(data);\n                        }\n                    }\n                ],\n                rowClick: function(e, row) {\n                    self.viewCluster(row.getData().id);\n                }\n            });\n            \n            // Load data\n            this.loadClusters();\n        },\n        \n        /**\n         * Render action buttons for table row\n         */\n        renderActionButtons: function(data) {\n            var html = '<div class=\"btn-group btn-group-sm\" role=\"group\">';\n            \n            html += '<button type=\"button\" class=\"btn btn-outline-primary btn-sm\" ' +\n                   'onclick=\"ClusterManager.viewCluster(' + data.id + ')\" title=\"View Details\">' +\n                   '<i class=\"fa fa-eye\"></i></button>';\n            \n            if (data.access_level === 'manage' || data.is_owner) {\n                html += '<button type=\"button\" class=\"btn btn-outline-secondary btn-sm\" ' +\n                       'onclick=\"ClusterManager.editCluster(' + data.id + ')\" title=\"Edit\">' +\n                       '<i class=\"fa fa-edit\"></i></button>';\n                \n                html += '<button type=\"button\" class=\"btn btn-outline-danger btn-sm\" ' +\n                       'onclick=\"ClusterManager.deleteCluster(' + data.id + ', \\'' + \n                       data.name.replace(/'/g, \"\\\\'\") + '\\')\" title=\"Delete\">' +\n                       '<i class=\"fa fa-trash\"></i></button>';\n            }\n            \n            html += '</div>';\n            return html;\n        },\n        \n        /**\n         * Load clusters data\n         */\n        loadClusters: function() {\n            var self = this;\n            \n            console.log('ClusterManager: Loading clusters...');\n            $('#loading-state').show();\n            $('#empty-state').hide();\n            \n            var filters = this.getCurrentFilters();\n            \n            var request = {\n                methodname: 'aitoolsub_cluster_get_clusters',\n                args: {\n                    filters: filters\n                }\n            };\n            \n            Ajax.call([request])[0]\n                .done(function(response) {\n                    console.log('ClusterManager: Clusters loaded', response);\n                    \n                    $('#loading-state').hide();\n                    \n                    if (response.clusters.length === 0) {\n                        $('#empty-state').show();\n                        if (self.clustersTable) {\n                            self.clustersTable.clearData();\n                        }\n                    } else {\n                        $('#empty-state').hide();\n                        if (self.clustersTable) {\n                            self.clustersTable.setData(response.clusters);\n                        } else {\n                            self.renderClustersSimple(response.clusters);\n                        }\n                    }\n                    \n                    // Update pagination info\n                    self.updatePaginationInfo(response.pagination);\n                })\n                .fail(function(error) {\n                    console.error('ClusterManager: Error loading clusters', error);\n                    $('#loading-state').hide();\n                    Notification.addNotification({\n                        message: 'Error loading clusters: ' + error.message,\n                        type: 'error'\n                    });\n                });\n        },\n        \n        /**\n         * Load simple clusters without Tabulator\n         */\n        loadClustersSimple: function() {\n            console.log('ClusterManager: Loading clusters (simple mode)...');\n            this.loadClusters();\n        },\n        \n        /**\n         * Render clusters in simple table format\n         */\n        renderClustersSimple: function(clusters) {\n            var self = this;\n            var html = '<div class=\"table-responsive\">';\n            html += '<table class=\"table table-striped table-hover\">';\n            html += '<thead><tr>';\n            html += '<th>Name</th><th>Market</th><th>Status</th>';\n            html += '<th>Companies</th><th>Contacts</th><th>Messages</th>';\n            html += '<th>Modified</th><th>Actions</th>';\n            html += '</tr></thead><tbody>';\n            \n            clusters.forEach(function(cluster) {\n                html += '<tr>';\n                html += '<td><strong>' + cluster.name + '</strong>';\n                if (cluster.description) {\n                    html += '<br><small class=\"text-muted\">' + \n                           cluster.description.substring(0, 60) + \n                           (cluster.description.length > 60 ? '...' : '') + '</small>';\n                }\n                html += '</td>';\n                html += '<td>' + (cluster.market || '-') + '</td>';\n                html += '<td><span class=\"badge bg-' + self.getStatusBadgeClass(cluster.status) + '\">' + \n                       cluster.status.charAt(0).toUpperCase() + cluster.status.slice(1) + '</span></td>';\n                html += '<td><span class=\"badge bg-info\">' + cluster.company_count + '</span></td>';\n                html += '<td><span class=\"badge bg-warning\">' + cluster.person_count + '</span></td>';\n                html += '<td><span class=\"badge bg-primary\">' + cluster.message_count + '</span></td>';\n                html += '<td>' + self.formatDate(cluster.modified_date) + '</td>';\n                html += '<td>' + self.renderActionButtons(cluster) + '</td>';\n                html += '</tr>';\n            });\n            \n            html += '</tbody></table></div>';\n            $('#clusters-table-container').html(html);\n        },\n        \n        /**\n         * Get current filter values\n         */\n        getCurrentFilters: function() {\n            return {\n                status: $('#status-filter').val(),\n                market: $('#market-filter').val(),\n                search: $('#search-input').val().trim(),\n                limit: 50,\n                offset: 0\n            };\n        },\n        \n        /**\n         * Apply filters to clusters table\n         */\n        applyFilters: function() {\n            console.log('ClusterManager: Applying filters...');\n            this.loadClusters();\n        },\n        \n        /**\n         * Clear all filters\n         */\n        clearFilters: function() {\n            console.log('ClusterManager: Clearing filters...');\n            $('#status-filter').val('');\n            $('#market-filter').val('');\n            $('#search-input').val('');\n            this.loadClusters();\n        },\n        \n        /**\n         * Toggle between table and card view\n         */\n        toggleViewMode: function(mode) {\n            console.log('ClusterManager: Switching to ' + mode);\n            \n            if (mode === 'card-view') {\n                $('#clusters-table-container').hide();\n                $('#clusters-cards-container').show();\n                this.loadClustersCards();\n            } else {\n                $('#clusters-cards-container').hide();\n                $('#clusters-table-container').show();\n            }\n        },\n        \n        /**\n         * Load clusters in card view\n         */\n        loadClustersCards: function() {\n            console.log('ClusterManager: Loading card view...');\n            $('#clusters-cards').html('<p class=\"text-center\">Card view coming soon...</p>');\n        },\n        \n        /**\n         * Show create cluster modal\n         */\n        showCreateClusterModal: function() {\n            console.log('ClusterManager: Showing create cluster modal...');\n            \n            this.currentCluster = null;\n            $('#cluster-modal-label').text('Create New Cluster');\n            $('#cluster-form')[0].reset();\n            $('#cluster-id').val('');\n            $('#save-cluster-btn').html('<i class=\"fa fa-save\"></i> Save Cluster');\n            \n            var modal = new bootstrap.Modal(document.getElementById('cluster-modal'));\n            modal.show();\n        },\n        \n        /**\n         * Show edit cluster modal\n         */\n        editCluster: function(clusterId) {\n            console.log('ClusterManager: Editing cluster ' + clusterId);\n            \n            var self = this;\n            \n            // Get cluster data\n            var request = {\n                methodname: 'aitoolsub_cluster_get_clusters',\n                args: {\n                    filters: { cluster_id: clusterId }\n                }\n            };\n            \n            Ajax.call([request])[0]\n                .done(function(response) {\n                    if (response.clusters.length > 0) {\n                        var cluster = response.clusters[0];\n                        self.currentCluster = cluster;\n                        \n                        // Populate form\n                        $('#cluster-modal-label').text('Edit Cluster');\n                        $('#cluster-id').val(cluster.id);\n                        $('#cluster-name').val(cluster.name);\n                        $('#cluster-market').val(cluster.market);\n                        $('#cluster-description').val(cluster.description);\n                        $('#cluster-status').val(cluster.status);\n                        $('#save-cluster-btn').html('<i class=\"fa fa-save\"></i> Update Cluster');\n                        \n                        var modal = new bootstrap.Modal(document.getElementById('cluster-modal'));\n                        modal.show();\n                    }\n                })\n                .fail(function(error) {\n                    console.error('ClusterManager: Error loading cluster for edit', error);\n                    Notification.addNotification({\n                        message: 'Error loading cluster data: ' + error.message,\n                        type: 'error'\n                    });\n                });\n        },\n        \n        /**\n         * Save cluster (create or update)\n         */\n        saveCluster: function() {\n            console.log('ClusterManager: Saving cluster...');\n            \n            var self = this;\n            var formData = this.getFormData('#cluster-form');\n            var isEdit = $('#cluster-id').val() !== '';\n            \n            // Validate required fields\n            if (!formData.name.trim()) {\n                Notification.addNotification({\n                    message: 'Cluster name is required',\n                    type: 'error'\n                });\n                return;\n            }\n            \n            var methodname = isEdit ? 'aitoolsub_cluster_update_cluster' : 'aitoolsub_cluster_create_cluster';\n            var args = {\n                name: formData.name.trim(),\n                market: formData.market.trim(),\n                description: formData.description.trim(),\n                status: formData.status\n            };\n            \n            if (isEdit) {\n                args.cluster_id = parseInt(formData.cluster_id);\n            }\n            \n            $('#save-cluster-btn').prop('disabled', true).html('<i class=\"fa fa-spinner fa-spin\"></i> Saving...');\n            \n            var request = {\n                methodname: methodname,\n                args: args\n            };\n            \n            Ajax.call([request])[0]\n                .done(function(response) {\n                    console.log('ClusterManager: Cluster saved', response);\n                    \n                    Notification.addNotification({\n                        message: response.message,\n                        type: 'success'\n                    });\n                    \n                    // Close modal and refresh data\n                    bootstrap.Modal.getInstance(document.getElementById('cluster-modal')).hide();\n                    self.loadClusters();\n                    self.loadStats();\n                })\n                .fail(function(error) {\n                    console.error('ClusterManager: Error saving cluster', error);\n                    Notification.addNotification({\n                        message: 'Error saving cluster: ' + error.message,\n                        type: 'error'\n                    });\n                })\n                .always(function() {\n                    $('#save-cluster-btn').prop('disabled', false).html('<i class=\"fa fa-save\"></i> Save Cluster');\n                });\n        },\n        \n        /**\n         * View cluster details\n         */\n        viewCluster: function(clusterId) {\n            console.log('ClusterManager: Viewing cluster ' + clusterId);\n            \n            // Navigate to cluster details page\n            window.location.href = this.config.wwwroot + '/local/aitools/plugins/cluster/view.php?id=' + clusterId;\n        },\n        \n        /**\n         * Delete cluster\n         */\n        deleteCluster: function(clusterId, clusterName) {\n            console.log('ClusterManager: Deleting cluster ' + clusterId);\n            \n            var self = this;\n            \n            // Show confirmation modal\n            $('#delete-cluster-name').text(clusterName);\n            \n            var modal = new bootstrap.Modal(document.getElementById('delete-cluster-modal'));\n            modal.show();\n            \n            // Handle confirmation\n            $('#confirm-delete-btn').off('click').on('click', function() {\n                $(this).prop('disabled', true).html('<i class=\"fa fa-spinner fa-spin\"></i> Deleting...');\n                \n                var request = {\n                    methodname: 'aitoolsub_cluster_delete_cluster',\n                    args: {\n                        cluster_id: clusterId\n                    }\n                };\n                \n                Ajax.call([request])[0]\n                    .done(function(response) {\n                        console.log('ClusterManager: Cluster deleted', response);\n                        \n                        Notification.addNotification({\n                            message: response.message,\n                            type: 'success'\n                        });\n                        \n                        modal.hide();\n                        self.loadClusters();\n                        self.loadStats();\n                    })\n                    .fail(function(error) {\n                        console.error('ClusterManager: Error deleting cluster', error);\n                        Notification.addNotification({\n                            message: 'Error deleting cluster: ' + error.message,\n                            type: 'error'\n                        });\n                    })\n                    .always(function() {\n                        $('#confirm-delete-btn').prop('disabled', false).html('<i class=\"fa fa-trash\"></i> Delete Cluster');\n                    });\n            });\n        },\n        \n        /**\n         * Load dashboard statistics\n         */\n        loadStats: function() {\n            var self = this;\n            \n            console.log('ClusterManager: Loading stats...');\n            \n            var request = {\n                methodname: 'aitoolsub_cluster_get_clusters',\n                args: {\n                    filters: { summary_only: true }\n                }\n            };\n            \n            Ajax.call([request])[0]\n                .done(function(response) {\n                    console.log('ClusterManager: Stats loaded', response);\n                    \n                    // Update stats cards\n                    var totalClusters = response.clusters.length;\n                    var activeClusters = response.clusters.filter(function(c) { \n                        return c.status === 'active'; \n                    }).length;\n                    var totalCompanies = response.clusters.reduce(function(sum, c) { \n                        return sum + c.company_count; \n                    }, 0);\n                    var totalPersons = response.clusters.reduce(function(sum, c) { \n                        return sum + c.person_count; \n                    }, 0);\n                    \n                    $('#total-clusters').text(totalClusters);\n                    $('#active-clusters').text(activeClusters);\n                    $('#total-companies').text(totalCompanies);\n                    $('#total-persons').text(totalPersons);\n                })\n                .fail(function(error) {\n                    console.error('ClusterManager: Error loading stats', error);\n                });\n        },\n        \n        /**\n         * Update pagination information\n         */\n        updatePaginationInfo: function(pagination) {\n            console.log('ClusterManager: Pagination info', pagination);\n            // Implementation for pagination info updates can be added here\n        },\n        \n        /**\n         * Get form data as object\n         */\n        getFormData: function(formSelector) {\n            var formData = {};\n            $(formSelector).serializeArray().forEach(function(field) {\n                formData[field.name] = field.value;\n            });\n            return formData;\n        },\n        \n        /**\n         * Format timestamp to readable date\n         */\n        formatDate: function(timestamp) {\n            if (!timestamp) return '-';\n            \n            var date = new Date(timestamp * 1000);\n            var now = new Date();\n            var diffTime = now - date;\n            var diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n            \n            if (diffDays === 0) {\n                return 'Today';\n            } else if (diffDays === 1) {\n                return 'Yesterday';\n            } else if (diffDays < 7) {\n                return diffDays + 'd ago';\n            } else {\n                return date.toLocaleDateString();\n            }\n        },\n        \n        /**\n         * Get badge class for status\n         */\n        getStatusBadgeClass: function(status) {\n            var classes = {\n                'planning': 'secondary',\n                'active': 'success',\n                'paused': 'warning',\n                'completed': 'info'\n            };\n            return classes[status] || 'secondary';\n        },\n        \n        /**\n         * Debounce function for search input\n         */\n        debounce: function(func, wait) {\n            var timeout;\n            return function executedFunction() {\n                var context = this;\n                var args = arguments;\n                var later = function() {\n                    timeout = null;\n                    func.apply(context, args);\n                };\n                clearTimeout(timeout);\n                timeout = setTimeout(later, wait);\n            };\n        }\n    };\n    \n    // Expose ClusterManager globally for button onclick handlers\n    window.ClusterManager = ClusterManager;\n    \n    return {\n        init: ClusterManager.init.bind(ClusterManager)\n    };\n});"],"names":["define","Tabulator","$","Ajax","Notification","ClusterManager","config","contextid","wwwroot","sesskey","userid","clustersTable","valuemapData","currentCluster","init","console","log","window","ClusterConfig","initEventHandlers","loadValueMapData","initClustersTable","loadStats","self","this","on","showCreateClusterModal","applyFilters","debounce","clearFilters","toggleViewMode","attr","e","preventDefault","saveCluster","forceRefresh","Object","keys","length","populateDropdowns","call","methodname","args","fields","search","limit","done","response","error","warn","addNotification","message","type","context_data","statistics","fail","marketFilter","empty","append","clusterMarket","market","forEach","item","option","value","text","display","clone","makeSelectEditable","selector","$select","$wrapper","$input","wrap","after","val","find","show","focus","hide","trim","customValue","loadClustersSimple","height","layout","placeholder","pagination","paginationSize","paginationSizeSelector","movableColumns","resizableRows","responsiveLayout","columns","title","field","width","headerFilter","formatter","cell","data","getData","html","name","description","substring","headerFilterParams","values","status","getValue","charAt","toUpperCase","slice","hozAlign","formatDate","headerSort","renderActionButtons","rowClick","row","viewCluster","id","loadClusters","access_level","is_owner","replace","request","filters","getCurrentFilters","clusters","clearData","setData","renderClustersSimple","updatePaginationInfo","cluster","getStatusBadgeClass","company_count","person_count","message_count","modified_date","offset","mode","loadClustersCards","reset","bootstrap","Modal","document","getElementById","editCluster","clusterId","cluster_id","formData","getFormData","isEdit","parseInt","prop","getInstance","always","location","href","deleteCluster","clusterName","modal","off","summary_only","totalClusters","activeClusters","filter","c","totalCompanies","reduce","sum","totalPersons","formSelector","serializeArray","timestamp","date","Date","diffTime","diffDays","Math","floor","toLocaleDateString","func","wait","timeout","context","arguments","later","apply","clearTimeout","setTimeout","bind"],"mappings":"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"}