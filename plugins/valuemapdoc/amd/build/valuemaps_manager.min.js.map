{"version":3,"file":"valuemaps_manager.min.js","sources":["../src/valuemaps_manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * ValueMaps Manager JavaScript Module\n * Optimized for cross-course/activity value map entries display\n * Handles 1-10 activities with 5-50 entries each (~500 max entries)\n *\n * @copyright  2024 Local AI Tools\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/ajax', 'core/notification'], function($, Ajax, Notification) {\n    'use strict';\n\n    var table = null;\n    var config = window.valuemapsConfig || {};\n    var allData = [];\n    var processedData = [];\n    var selectedRows = [];\n    var currentStatistics = {};\n\n\n    return {\n        /**\n         * Initialize the module\n         */\n        init: function() {\n            // Get columns configuration from DOM\n            var columnsElement = document.querySelector('#valuemap-columns');\n            if (columnsElement && columnsElement.textContent) {\n                var columns;\n                try {\n                    columns = JSON.parse(columnsElement.textContent);\n                } catch (e) {\n                    this.showErrorState('Invalid column configuration');\n                    return;\n                }\n\n                if (Array.isArray(columns)) {\n                    this.waitForTabulator(columns);\n                } else {\n                    this.showErrorState('Column configuration is not valid');\n                }\n            } else {\n                this.showErrorState('Column configuration not found');\n            }\n        },\n\n        /**\n         * Wait for Tabulator to be available and then initialize\n         * @param {Array} columns Column configuration from DOM\n         */\n        waitForTabulator: function(columns) {\n            var self = this;\n            if (typeof window.Tabulator !== 'undefined') {\n                this.bindEvents();\n                this.loadData(columns);\n            } else {\n                setTimeout(function() {\n                    self.waitForTabulator(columns);\n                }, 100);\n            }\n        },\n\n        /**\n         * Bind event handlers\n         */\n        bindEvents: function() {\n            var self = this;\n\n            // Refresh data\n            $('#refresh-data').on('click', function() {\n                self.init();\n            });\n\n            // Export data\n            $('#export-data').on('click', function() {\n                self.showExportOptions();\n            });\n\n            // Clear filters\n            $('#clear-filters').on('click', function() {\n                self.clearFilters();\n            });\n\n            // Filter controls\n            $('#filter-course, #filter-activity').on('change', function() {\n                self.applyFilters();\n            });\n\n            $('#search-entries').on('input', function() {\n                self.applyFilters();\n            });\n\n            // Retry loading\n            $('#retry-loading').on('click', function() {\n                self.init();\n            });\n\n            // Fullscreen toggle\n            $('#toggle-fullscreen').on('click', function() {\n                self.toggleFullscreen();\n            });\n        },\n\n        /**\n         * Load data from server - use static columns from DOM\n         * @param {Array} columns Column configuration from DOM\n         */\n        loadData: function(columns) {\n            var self = this;\n            this.showLoadingState();\n\n            Ajax.call([{\n                methodname: 'aitoolsub_valuemapdoc_get_all_entries_global',\n                args: {\n                    userid: config.userid || 0,\n                    page: 0,\n                    limit: 0\n                }\n            }])[0].done(function(data) {\n                // Store raw data\n                allData = data.entries || [];\n                currentStatistics = data.statistics || {};\n\n                // Update UI with statistics\n                self.updateStatistics(currentStatistics);\n                self.populateFilterOptions(currentStatistics);\n\n                // Use columns from DOM (static configuration)\n                console.log('Using static columns from DOM:', columns);\n                console.log('Static columns count:', columns.length);\n\n                if (allData.length > 0) {\n                    var groupedData = self.processDataWithNativeGrouping(allData);\n                    self.initializeTableWithGrouping(columns, groupedData);\n                    self.showTableState();\n                } else {\n                    self.showEmptyState();\n                }\n\n            }).fail(function(error) {\n                self.showErrorState(error.message || 'Failed to load entries');\n                Notification.exception(error);\n            });\n        },\n\n        /**\n         * Build user-specific columns based on field level (7/13/20 fields)\n         * @param {Array} userFields Array of field names for user's level\n         * @param {Object} levelConfig User's level configuration\n         * @return {Array} Column definitions for Tabulator\n         */\n        buildUserColumns: function(userFields, levelConfig) {\n            // Field to title mapping\n            var fieldTitles = {\n                'market': 'Market',\n                'industry': 'Industry', \n                'role': 'Role',\n                'businessgoal': 'Business Goal',\n                'strategy': 'Strategy',\n                'difficulty': 'Difficulty',\n                'situation': 'Situation',\n                'statusquo': 'Status Quo',\n                'coi': 'Cost of Inaction',\n                'differentiator': 'Differentiator',\n                'impact': 'Impact',\n                'newstate': 'New State',\n                'successmetric': 'Success Metric',\n                'impactstrategy': 'Impact Strategy',\n                'impactbusinessgoal': 'Impact Business Goal',\n                'impactothers': 'Impact Others',\n                'proof': 'Proof',\n                'time2results': 'Time to Results',\n                'quote': 'Quote',\n                'clientname': 'Client Name'\n            };\n\n            var columns = [];\n\n            // Build columns from user fields\n            userFields.forEach(function(fieldName) {\n                columns.push({\n                    title: fieldTitles[fieldName] || fieldName,\n                    field: fieldName,\n                    hozAlign: 'left',\n                    headerSort: true,\n                    width: 150,\n                    headerFilter: 'input',\n                    headerFilterPlaceholder: 'Filter...'\n                });\n            });\n\n            return columns;\n        },\n\n        /**\n         * OPTION 2: Process data for native Tabulator grouping\n         * @param {Array} entries Array of entries from server  \n         * @return {Array} Processed data for grouping\n         */\n        processDataWithNativeGrouping: function(entries) {\n            if (entries.length === 0) {\n                return [];\n            }\n\n            // Add grouping field and proper URLs to each entry\n            entries.forEach(function(entry) {\n                entry.course_activity_group = entry.course_name + ' â†’ ' + entry.activity_name;\n                \n                // Fix undefined URLs - build proper activity URLs\n                entry.view_activity_url = M.cfg.wwwroot + '/mod/valuemapdoc/view.php?id=' + entry.cmid;\n                entry.edit_url = M.cfg.wwwroot + '/mod/valuemapdoc/edit.php?id=' + entry.cmid + '&entryid=' + entry.id;\n            });\n\n            return entries;\n        },\n\n        /**\n         * Update statistics display with cross-course data\n         * @param {Object} stats Statistics object from server\n         */\n        updateStatistics: function(stats) {\n            $('#stat-total-entries').text(stats.total_entries || 0);\n            $('#stat-unique-courses').text(stats.unique_courses || 0);\n            $('#stat-unique-activities').text(stats.unique_activities || 0);\n\n            // Update dashboard summary if present\n            if ($('.dashboard-summary').length > 0) {\n                $('.dashboard-summary .entries-count').text(stats.total_entries || 0);\n                $('.dashboard-summary .courses-count').text(stats.unique_courses || 0);\n                $('.dashboard-summary .activities-count').text(stats.unique_activities || 0);\n            }\n        },\n\n        /**\n         * Populate filter dropdown options from statistics\n         * @param {Object} stats Statistics containing lists\n         */\n        populateFilterOptions: function(stats) {\n            // Populate course filter\n            var courseSelect = $('#filter-course');\n            courseSelect.find('option:not(:first)').remove();\n            if (stats.courses_list && stats.courses_list.length > 0) {\n                stats.courses_list.forEach(function(course) {\n                    courseSelect.append('<option value=\"' + course + '\">' + course + '</option>');\n                });\n            }\n\n            // Populate activity filter\n            var activitySelect = $('#filter-activity');\n            activitySelect.find('option:not(:first)').remove();\n            if (stats.activities_list && stats.activities_list.length > 0) {\n                stats.activities_list.forEach(function(activity) {\n                    activitySelect.append('<option value=\"' + activity + '\">' + activity + '</option>');\n                });\n            }\n        },\n\n        /**\n         * OPTION 1: Prepare columns for custom separators (CSS positioning)\n         * @param {Array} userColumns User's field columns (7/13/20)\n         * @return {Array} Enhanced columns for Tabulator\n         */\n        prepareColumns: function(userColumns) {\n            var self = this;\n            var enhancedColumns = [];\n\n            // 1. Checkbox column - ONLY CHECKBOX, no HTML\n            enhancedColumns.push({\n                title: '',\n                field: 'checkbox',\n                width: 40,\n                hozAlign: \"center\",\n                headerSort: false,\n                formatter: function(cell) {\n                    var data = cell.getRow().getData();\n                    if (data.isSeparator) {\n                        return '';\n                    }\n                    return '<input type=\"checkbox\" class=\"entry-checkbox\" data-entry-id=\"' + data.id + '\">';\n                },\n                cellClick: function(e, cell) {\n                    e.stopPropagation();\n                    var data = cell.getRow().getData();\n                    if (!data.isSeparator) {\n                        self.toggleRowSelection(data.id);\n                    }\n                }\n            });\n\n            // 2. User's field columns - PLAIN TEXT ONLY\n            userColumns.forEach(function(col) {\n                enhancedColumns.push({\n                    title: col.title,\n                    field: col.field,\n                    hozAlign: 'left',\n                    headerSort: true,\n                    width: col.width || 150,\n                    headerFilter: \"input\",\n                    headerFilterPlaceholder: \"Filter \" + col.title + \"...\",\n                    editable: false,\n                    formatter: function(cell) {\n                        var data = cell.getRow().getData();\n                        if (data.isSeparator) {\n                            return '';\n                        }\n                        // PLAIN TEXT - no HTML formatting\n                        return data[col.field] || '';\n                    }\n                });\n            });\n\n            return enhancedColumns;\n        },\n\n        /**\n         * OPTION 2: Prepare columns for native grouping\n         * @param {Array} userColumns User's field columns (7/13/20)\n         * @return {Array} Enhanced columns for Tabulator\n         */\n        prepareColumnsForGrouping: function(userColumns) {\n            var self = this;\n            var enhancedColumns = [];\n\n            // 1. Checkbox column\n            enhancedColumns.push({\n                title: '',\n                field: 'checkbox',\n                width: 40,\n                hozAlign: \"center\",\n                headerSort: false,\n                formatter: function(cell) {\n                    return '<input type=\"checkbox\" class=\"entry-checkbox\" data-entry-id=\"' + cell.getRow().getData().id + '\">';\n                },\n                cellClick: function(e, cell) {\n                    e.stopPropagation();\n                    self.toggleRowSelection(cell.getRow().getData().id);\n                }\n            });\n\n            // 2. User's field columns\n            userColumns.forEach(function(col) {\n                enhancedColumns.push({\n                    title: col.title,\n                    field: col.field,\n                    hozAlign: 'left',\n                    headerSort: true,\n                    width: col.width || 150,\n                    headerFilter: \"input\",\n                    headerFilterPlaceholder: \"Filter \" + col.title + \"...\",\n                    editable: false,\n                    formatter: function(cell) {\n                        return cell.getRow().getData()[col.field] || '';\n                    }\n                });\n            });\n\n            return enhancedColumns;\n        },\n\n\n        /**\n         * OPTION 2: Initialize table with native Tabulator grouping\n         * @param {Array} userColumns User's field columns\n         * @param {Array} data Table data\n         */\n        initializeTableWithGrouping: function(userColumns, data) {\n            var self = this;\n\n            if (table) {\n                table.destroy();\n            }\n\n            var enhancedColumns = this.prepareColumnsForGrouping(userColumns);\n            \n            // DEBUG: SprawdÅº kolumny przed utworzeniem tabeli\n            console.log('Enhanced columns before Tabulator:', enhancedColumns);\n            console.log('Enhanced columns count:', enhancedColumns.length);\n            console.log('First few columns:', enhancedColumns.slice(0, 5));\n\n            // eslint-disable-next-line no-undef\n            table = new Tabulator(\"#valuemaps-table\", {\n                data: data,\n                columns: enhancedColumns,\n                //layout: \"fitColumns\",\n                //responsiveLayout: \"hide\",\n                placeholder: \"No entries found\",\n                pagination: \"local\",\n                paginationSize: 25,\n                paginationSizeSelector: [10, 25, 50, 100],\n                //movableColumns: true,\n                //resizableRows: false,\n                //selectable: false,\n                //tooltipsHeader: true,\n                \n                // Native grouping approach\n                groupBy: \"course_activity_group\",\n                groupHeader: function(value, count, data, group) {\n                    // Extract course and activity info from first item\n                    var firstItem = data[0];\n                    var viewUrl = firstItem.view_activity_url || (M.cfg.wwwroot + '/mod/valuemapdoc/view.php?id=' + firstItem.cmid);\n                    \n                    return '<span style=\"font-weight: bold; color: #007bff; cursor: pointer; display: block; padding: 8px; background: #f8f9fa; border-top: 2px solid #007bff;\" ' +\n                           'onclick=\"window.open(\\'' + viewUrl + '\\', \\'_blank\\')\" ' +\n                           'title=\"Click to open activity\">' +\n                           value + ' (' + count + ' entries)</span>';\n                },\n                groupStartOpen: true,\n                groupToggleElement: \"header\"\n            });\n\n            // Row double-click to edit\n            table.on(\"rowDblClick\", function(e, row) {\n                var data = row.getData();\n                window.open(data.edit_url, '_blank');\n            });\n\n            this.initializeSelectionTracking();\n        },\n\n        /**\n         * Initialize selection tracking for bulk operations\n         */\n        initializeSelectionTracking: function() {\n            var self = this;\n            \n            // Handle checkbox changes\n            $(document).on('change', '.entry-checkbox', function() {\n                var entryId = parseInt($(this).data('entry-id'));\n                var isChecked = $(this).prop('checked');\n                \n                if (isChecked) {\n                    if (selectedRows.indexOf(entryId) === -1) {\n                        selectedRows.push(entryId);\n                    }\n                } else {\n                    selectedRows = selectedRows.filter(function(id) {\n                        return id !== entryId;\n                    });\n                }\n                \n                self.updateSelectionUI();\n            });\n        },\n\n        /**\n         * Toggle row selection\n         * @param {Number} entryId Entry ID to toggle\n         */\n        toggleRowSelection: function(entryId) {\n            var checkbox = $('.entry-checkbox[data-entry-id=\"' + entryId + '\"]');\n            var isChecked = checkbox.prop('checked');\n            \n            checkbox.prop('checked', !isChecked);\n            \n            if (!isChecked) {\n                if (selectedRows.indexOf(entryId) === -1) {\n                    selectedRows.push(entryId);\n                }\n            } else {\n                selectedRows = selectedRows.filter(function(id) {\n                    return id !== entryId;\n                });\n            }\n            \n            this.updateSelectionUI();\n        },\n\n        /**\n         * Update selection UI for bulk operations\n         */\n        updateSelectionUI: function() {\n            var count = selectedRows.length;\n            var selectionInfo = $('.selection-info');\n            \n            if (count > 0) {\n                if (selectionInfo.length === 0) {\n                    $('.table-controls').prepend(\n                        '<div class=\"selection-info alert alert-info d-flex align-items-center me-2\">' +\n                        '<span class=\"selection-count\">' + count + '</span>' +\n                        '<span class=\"ms-1 me-2\">entries selected</span>' +\n                        '<button class=\"btn btn-sm btn-primary me-1\" id=\"bulk-export\">Export Selected</button>' +\n                        '<button class=\"btn btn-sm btn-outline-secondary\" id=\"clear-selection\">Clear</button>' +\n                        '</div>'\n                    );\n                    \n                    // Bind bulk actions\n                    $('#bulk-export').on('click', function() {\n                        this.exportSelected();\n                    }.bind(this));\n                    \n                    $('#clear-selection').on('click', function() {\n                        this.clearSelection();\n                    }.bind(this));\n                } else {\n                    selectionInfo.find('.selection-count').text(count);\n                }\n            } else {\n                selectionInfo.remove();\n            }\n        },\n\n        /**\n         * Apply filters to the table with cross-course context\n         */\n        applyFilters: function() {\n            if (!table) {\n                return;\n            }\n\n            // Clear existing filters\n            table.clearFilter();\n\n            // Get filter values\n            var courseFilter = $('#filter-course').val();\n            var activityFilter = $('#filter-activity').val();\n            var searchFilter = $('#search-entries').val();\n\n            // Apply course filter\n            if (courseFilter) {\n                table.addFilter(\"course_name\", \"=\", courseFilter);\n            }\n\n            // Apply activity filter\n            if (activityFilter) {\n                table.addFilter(\"activity_name\", \"=\", activityFilter);\n            }\n\n            // Apply search filter across multiple fields\n            if (searchFilter) {\n                table.addFilter([\n                    {field: \"market\", type: \"like\", value: searchFilter},\n                    {field: \"industry\", type: \"like\", value: searchFilter},\n                    {field: \"role\", type: \"like\", value: searchFilter},\n                    {field: \"businessgoal\", type: \"like\", value: searchFilter},\n                    {field: \"course_name\", type: \"like\", value: searchFilter},\n                    {field: \"activity_name\", type: \"like\", value: searchFilter},\n                    {field: \"username\", type: \"like\", value: searchFilter}\n                ]);\n            }\n        },\n\n        /**\n         * Clear all filters\n         */\n        clearFilters: function() {\n            if (!table) {\n                return;\n            }\n\n            table.clearFilter();\n            $('#filter-course').val('');\n            $('#filter-activity').val('');\n            $('#search-entries').val('');\n        },\n\n        /**\n         * Clear selection\n         */\n        clearSelection: function() {\n            selectedRows = [];\n            $('.entry-checkbox').prop('checked', false);\n            $('.selection-info').remove();\n        },\n\n        /**\n         * Export selected entries\n         */\n        exportSelected: function() {\n            if (!table || selectedRows.length === 0) {\n                return;\n            }\n\n            // Filter table data to selected entries\n            var selectedData = table.getData().filter(function(row) {\n                return selectedRows.indexOf(row.id) !== -1;\n            });\n\n            // Create temporary table for export\n            var tempDiv = $('<div id=\"temp-export-table\" style=\"display: none;\"></div>');\n            $('body').append(tempDiv);\n\n            // eslint-disable-next-line no-undef\n            var tempTable = new Tabulator(\"#temp-export-table\", {\n                data: selectedData,\n                columns: this.prepareColumns([]), // Reuse column config\n                layout: \"fitData\"\n            });\n\n            // Export and cleanup\n            tempTable.download(\"csv\", \"selected-valuemap-entries.csv\");\n            setTimeout(function() {\n                tempTable.destroy();\n                tempDiv.remove();\n            }, 1000);\n        },\n\n        /**\n         * Show export options\n         */\n        showExportOptions: function() {\n            if (!table) {\n                return;\n            }\n\n            // Simple export all visible data\n            table.download(\"csv\", \"valuemap-entries-\" + new Date().toISOString().split('T')[0] + \".csv\");\n        },\n\n        /**\n         * Toggle fullscreen mode\n         */\n        toggleFullscreen: function() {\n            var container = $('#valuemaps-container');\n            container.toggleClass('fullscreen');\n\n            if (table) {\n                setTimeout(function() {\n                    table.redraw();\n                }, 100);\n            }\n        },\n\n        /**\n         * Show loading state\n         */\n        showLoadingState: function() {\n            $('#loading-state').show();\n            $('#table-state').hide();\n            $('#empty-state').hide();\n            $('#error-state').hide();\n        },\n\n        /**\n         * Show table state\n         */\n        showTableState: function() {\n            $('#loading-state').hide();\n            $('#table-state').show();\n            $('#empty-state').hide();\n            $('#error-state').hide();\n        },\n\n        /**\n         * Show empty state\n         */\n        showEmptyState: function() {\n            $('#loading-state').hide();\n            $('#table-state').hide();\n            $('#empty-state').show();\n            $('#error-state').hide();\n        },\n\n        /**\n         * Show error state\n         * @param {String} message Error message to display\n         */\n        showErrorState: function(message) {\n            $('#loading-state').hide();\n            $('#table-state').hide();\n            $('#empty-state').hide();\n            $('#error-state').show();\n            $('#error-message').text(message || 'An error occurred while loading data.');\n        }\n    };\n});\n"],"names":["define","$","Ajax","Notification","table","config","window","valuemapsConfig","allData","selectedRows","currentStatistics","init","columnsElement","document","querySelector","textContent","columns","JSON","parse","e","showErrorState","Array","isArray","waitForTabulator","self","this","Tabulator","bindEvents","loadData","setTimeout","on","showExportOptions","clearFilters","applyFilters","toggleFullscreen","showLoadingState","call","methodname","args","userid","page","limit","done","data","entries","statistics","updateStatistics","populateFilterOptions","console","log","length","groupedData","processDataWithNativeGrouping","initializeTableWithGrouping","showTableState","showEmptyState","fail","error","message","exception","buildUserColumns","userFields","levelConfig","fieldTitles","forEach","fieldName","push","title","field","hozAlign","headerSort","width","headerFilter","headerFilterPlaceholder","entry","course_activity_group","course_name","activity_name","view_activity_url","M","cfg","wwwroot","cmid","edit_url","id","stats","text","total_entries","unique_courses","unique_activities","courseSelect","find","remove","courses_list","course","append","activitySelect","activities_list","activity","prepareColumns","userColumns","enhancedColumns","formatter","cell","getRow","getData","isSeparator","cellClick","stopPropagation","toggleRowSelection","col","editable","prepareColumnsForGrouping","destroy","slice","placeholder","pagination","paginationSize","paginationSizeSelector","groupBy","groupHeader","value","count","group","firstItem","groupStartOpen","groupToggleElement","row","open","initializeSelectionTracking","entryId","parseInt","prop","indexOf","filter","updateSelectionUI","checkbox","isChecked","selectionInfo","prepend","exportSelected","bind","clearSelection","clearFilter","courseFilter","val","activityFilter","searchFilter","addFilter","type","selectedData","tempDiv","tempTable","layout","download","Date","toISOString","split","toggleClass","redraw","show","hide"],"mappings":"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"}