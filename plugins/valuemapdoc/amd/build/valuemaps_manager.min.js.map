{"version":3,"file":"valuemaps_manager.min.js","sources":["../src/valuemaps_manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * ValueMaps Manager JavaScript Module\n * Optimized for cross-course/activity value map entries display\n * Handles 1-10 activities with 5-50 entries each (~500 max entries)\n *\n * @copyright  2024 Local AI Tools\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/ajax', 'core/notification'], function($, Ajax, Notification) {\n    'use strict';\n\n    var table = null;\n    var config = window.valuemapsConfig || {};\n    var allData = [];\n    var processedData = [];\n    var selectedRows = [];\n    var currentStatistics = {};\n\n    // CONFIGURATION: Choose display method\n    var USE_NATIVE_GROUPING = false; // Set to true for OPTION 2, false for OPTION 1\n\n    return {\n        /**\n         * Initialize the module\n         */\n        init: function() {\n            // Get columns configuration from DOM\n            var columnsElement = document.querySelector('#valuemap-columns');\n            if (columnsElement && columnsElement.textContent) {\n                var columns;\n                try {\n                    columns = JSON.parse(columnsElement.textContent);\n                } catch (e) {\n                    this.showErrorState('Invalid column configuration');\n                    return;\n                }\n\n                if (Array.isArray(columns)) {\n                    this.waitForTabulator(columns);\n                } else {\n                    this.showErrorState('Column configuration is not valid');\n                }\n            } else {\n                this.showErrorState('Column configuration not found');\n            }\n        },\n\n        /**\n         * Wait for Tabulator to be available and then initialize\n         * @param {Array} columns Column configuration from DOM\n         */\n        waitForTabulator: function(columns) {\n            var self = this;\n            if (typeof window.Tabulator !== 'undefined') {\n                this.bindEvents();\n                this.loadData(columns);\n            } else {\n                setTimeout(function() {\n                    self.waitForTabulator(columns);\n                }, 100);\n            }\n        },\n\n        /**\n         * Bind event handlers\n         */\n        bindEvents: function() {\n            var self = this;\n\n            // Refresh data\n            $('#refresh-data').on('click', function() {\n                self.init();\n            });\n\n            // Export data\n            $('#export-data').on('click', function() {\n                self.showExportOptions();\n            });\n\n            // Clear filters\n            $('#clear-filters').on('click', function() {\n                self.clearFilters();\n            });\n\n            // Filter controls\n            $('#filter-course, #filter-activity').on('change', function() {\n                self.applyFilters();\n            });\n\n            $('#search-entries').on('input', function() {\n                self.applyFilters();\n            });\n\n            // Retry loading\n            $('#retry-loading').on('click', function() {\n                self.init();\n            });\n\n            // Fullscreen toggle\n            $('#toggle-fullscreen').on('click', function() {\n                self.toggleFullscreen();\n            });\n        },\n\n        /**\n         * Load data from server - use static columns from DOM\n         * @param {Array} columns Column configuration from DOM\n         */\n        loadData: function(columns) {\n            var self = this;\n            this.showLoadingState();\n\n            Ajax.call([{\n                methodname: 'aitoolsub_valuemapdoc_get_all_entries_global',\n                args: {\n                    userid: config.userid || 0,\n                    page: 0,\n                    limit: 0\n                }\n            }])[0].done(function(data) {\n                // Store raw data\n                allData = data.entries || [];\n                currentStatistics = data.statistics || {};\n                console.log('Loaded entries:', allData.length);\n                console.log('Statistics:', currentStatistics);     \n                console.log('Columns:', columns);\n\n                // Update UI with statistics\n                self.updateStatistics(currentStatistics);\n                self.populateFilterOptions(currentStatistics);\n\n                console.log('Static columns count:', columns.length);\n\n                if (allData.length > 0) {\n                    var groupedData = self.processDataWithNativeGrouping(allData);\n                    self.initializeTableWithGrouping(columns, groupedData);\n                    self.showTableState();\n                } else {\n                    self.showEmptyState();\n                }\n\n            }).fail(function(error) {\n                self.showErrorState(error.message || 'Failed to load entries');\n                Notification.exception(error);\n            });\n        },\n\n        /**\n         * Build user-specific columns based on field level (7/13/20 fields)\n         * @param {Array} userFields Array of field names for user's level\n         * @param {Object} levelConfig User's level configuration\n         * @return {Array} Column definitions for Tabulator\n         */\n        buildUserColumns: function(userFields, levelConfig) {\n            // Field to title mapping\n            var fieldTitles = {\n                'market': 'Market',\n                'industry': 'Industry', \n                'role': 'Role',\n                'businessgoal': 'Business Goal',\n                'strategy': 'Strategy',\n                'difficulty': 'Difficulty',\n                'situation': 'Situation',\n                'statusquo': 'Status Quo',\n                'coi': 'Cost of Inaction',\n                'differentiator': 'Differentiator',\n                'impact': 'Impact',\n                'newstate': 'New State',\n                'successmetric': 'Success Metric',\n                'impactstrategy': 'Impact Strategy',\n                'impactbusinessgoal': 'Impact Business Goal',\n                'impactothers': 'Impact Others',\n                'proof': 'Proof',\n                'time2results': 'Time to Results',\n                'quote': 'Quote',\n                'clientname': 'Client Name'\n            };\n\n            var columns = [];\n\n            // Build columns from user fields\n            userFields.forEach(function(fieldName) {\n                columns.push({\n                    title: fieldTitles[fieldName] || fieldName,\n                    field: fieldName,\n                    hozAlign: 'left',\n                    headerSort: true,\n                    width: 150,\n                    headerFilter: 'input',\n                    headerFilterPlaceholder: 'Filter...'\n                });\n            });\n\n            return columns;\n        },\n\n        /**\n         * OPTION 1: Process data with custom group separators (CSS positioning)\n         * @param {Array} entries Array of entries from server\n         * @return {Array} Processed data with group separators\n         */\n        processDataWithGroupSeparators: function(entries) {\n            if (entries.length === 0) {\n                return [];\n            }\n\n            var processedData = [];\n            var currentGroup = null;\n\n            // Sort entries by course name, then activity name, then modification time\n            entries.sort(function(a, b) {\n                if (a.course_name !== b.course_name) {\n                    return a.course_name.localeCompare(b.course_name);\n                }\n                if (a.activity_name !== b.activity_name) {\n                    return a.activity_name.localeCompare(b.activity_name);\n                }\n                return b.timemodified - a.timemodified; // Newest first\n            });\n\n            entries.forEach(function(entry) {\n                var groupKey = entry.course_name + ' â†’ ' + entry.activity_name;\n\n                // Add group separator when group changes\n                if (currentGroup !== groupKey) {\n                    processedData.push({\n                        id: 'separator_' + processedData.length,\n                        isSeparator: true,\n                        groupTitle: groupKey,\n                        course_name: entry.course_name,\n                        course_shortname: entry.course_shortname,\n                        activity_name: entry.activity_name,\n                        cmid: entry.cmid,\n                        course_id: entry.course_id,\n                        activity_id: entry.activity_id,\n                        // Quick action URLs\n                        view_activity_url: M.cfg.wwwroot + '/mod/valuemapdoc/view.php?id=' + entry.cmid,\n                        course_url: M.cfg.wwwroot + '/course/view.php?id=' + entry.course_id\n                    });\n                    currentGroup = groupKey;\n                }\n\n                // Add the actual entry\n                processedData.push(entry);\n            });\n\n            return processedData;\n        },\n\n        /**\n         * OPTION 2: Process data for native Tabulator grouping\n         * @param {Array} entries Array of entries from server  \n         * @return {Array} Processed data for grouping\n         */\n        processDataWithNativeGrouping: function(entries) {\n            if (entries.length === 0) {\n                return [];\n            }\n\n            // Add grouping field and proper URLs to each entry\n            entries.forEach(function(entry) {\n                entry.course_activity_group = entry.course_name + ' â†’ ' + entry.activity_name;\n                \n                // Fix undefined URLs - build proper activity URLs\n                entry.view_activity_url = M.cfg.wwwroot + '/mod/valuemapdoc/view.php?id=' + entry.cmid;\n                entry.edit_url = M.cfg.wwwroot + '/mod/valuemapdoc/edit.php?id=' + entry.cmid + '&entryid=' + entry.id;\n            });\n\n            return entries;\n        },\n\n        /**\n         * Update statistics display with cross-course data\n         * @param {Object} stats Statistics object from server\n         */\n        updateStatistics: function(stats) {\n            $('#stat-total-entries').text(stats.total_entries || 0);\n            $('#stat-unique-courses').text(stats.unique_courses || 0);\n            $('#stat-unique-activities').text(stats.unique_activities || 0);\n\n            // Update dashboard summary if present\n            if ($('.dashboard-summary').length > 0) {\n                $('.dashboard-summary .entries-count').text(stats.total_entries || 0);\n                $('.dashboard-summary .courses-count').text(stats.unique_courses || 0);\n                $('.dashboard-summary .activities-count').text(stats.unique_activities || 0);\n            }\n        },\n\n        /**\n         * Populate filter dropdown options from statistics\n         * @param {Object} stats Statistics containing lists\n         */\n        populateFilterOptions: function(stats) {\n            // Populate course filter\n            var courseSelect = $('#filter-course');\n            courseSelect.find('option:not(:first)').remove();\n            if (stats.courses_list && stats.courses_list.length > 0) {\n                stats.courses_list.forEach(function(course) {\n                    courseSelect.append('<option value=\"' + course + '\">' + course + '</option>');\n                });\n            }\n\n            // Populate activity filter\n            var activitySelect = $('#filter-activity');\n            activitySelect.find('option:not(:first)').remove();\n            if (stats.activities_list && stats.activities_list.length > 0) {\n                stats.activities_list.forEach(function(activity) {\n                    activitySelect.append('<option value=\"' + activity + '\">' + activity + '</option>');\n                });\n            }\n        },\n\n        /**\n         * OPTION 1: Prepare columns for custom separators (CSS positioning)\n         * @param {Array} userColumns User's field columns (7/13/20)\n         * @return {Array} Enhanced columns for Tabulator\n         */\n        prepareColumns: function(userColumns) {\n            var self = this;\n            var enhancedColumns = [];\n\n            // 1. Checkbox column - ONLY CHECKBOX, no HTML\n            enhancedColumns.push({\n                title: '',\n                field: 'checkbox',\n                width: 40,\n                hozAlign: \"center\",\n                headerSort: false,\n                formatter: function(cell) {\n                    var data = cell.getRow().getData();\n                    if (data.isSeparator) {\n                        return '';\n                    }\n                    return '<input type=\"checkbox\" class=\"entry-checkbox\" data-entry-id=\"' + data.id + '\">';\n                },\n                cellClick: function(e, cell) {\n                    e.stopPropagation();\n                    var data = cell.getRow().getData();\n                    if (!data.isSeparator) {\n                        self.toggleRowSelection(data.id);\n                    }\n                }\n            });\n\n            // 2. User's field columns - PLAIN TEXT ONLY\n            userColumns.forEach(function(col) {\n                enhancedColumns.push({\n                    title: col.title,\n                    field: col.field,\n                    hozAlign: 'left',\n                    headerSort: true,\n                    width: col.width || 150,\n                    headerFilter: \"input\",\n                    headerFilterPlaceholder: \"Filter \" + col.title + \"...\",\n                    editable: false,\n                    formatter: function(cell) {\n                        var data = cell.getRow().getData();\n                        if (data.isSeparator) {\n                            return '';\n                        }\n                        // PLAIN TEXT - no HTML formatting\n                        return data[col.field] || '';\n                    }\n                });\n            });\n\n            return enhancedColumns;\n        },\n\n        /**\n         * OPTION 2: Prepare columns for native grouping\n         * @param {Array} userColumns User's field columns (7/13/20)\n         * @return {Array} Enhanced columns for Tabulator\n         */\n        prepareColumnsForGrouping: function(userColumns) {\n            var self = this;\n            var enhancedColumns = [];\n\n            // 1. Checkbox column\n            enhancedColumns.push({\n                title: '',\n                field: 'checkbox',\n                width: 40,\n                hozAlign: \"center\",\n                headerSort: false,\n                formatter: function(cell) {\n                    return '<input type=\"checkbox\" class=\"entry-checkbox\" data-entry-id=\"' + cell.getRow().getData().id + '\">';\n                },\n                cellClick: function(e, cell) {\n                    e.stopPropagation();\n                    self.toggleRowSelection(cell.getRow().getData().id);\n                }\n            });\n\n            // 2. User's field columns\n            userColumns.forEach(function(col) {\n                console.log('Adding column:', col);    \n                enhancedColumns.push({\n                    title: col.title,\n                    field: col.field,\n                    hozAlign: 'left',\n                    headerSort: true,\n                    width: col.width || 150,\n                    headerFilter: \"input\",\n                    //headerFilterPlaceholder: \"Filter \" + col.title + \"...\",\n                    editable: false,\n                    formatter: function(cell) {\n                        return cell.getRow().getData()[col.field] || '';\n                    }\n                });\n            });\n\n            return enhancedColumns;\n        },\n\n        /**\n         * OPTION 1: Initialize table with custom separators (CSS positioning)\n         * @param {Array} userColumns User's field columns (7/13/20)\n         * @param {Array} data Table data with separators\n         */\n        initializeTable: function(userColumns, data) {\n            var self = this;\n\n            if (table) {\n                table.destroy();\n            }\n\n            var enhancedColumns = this.prepareColumns(userColumns);\n\n            // eslint-disable-next-line no-undef\n            table = new Tabulator(\"#valuemaps-table\", {\n                data: data,\n                columns: enhancedColumns,\n                layout: \"fitColumns\",\n                responsiveLayout: \"hide\",\n                placeholder: \"No entries found\",\n                pagination: \"local\",\n                paginationSize: 25,\n                paginationSizeSelector: [10, 25, 50, 100],\n                movableColumns: true,\n                resizableRows: false,\n                selectable: false,\n                tooltipsHeader: true,\n                \n                // Custom separator row formatting with CSS positioning\n                rowFormatter: function(row) {\n                    var data = row.getData();\n                    if (data.isSeparator) {\n                        var element = row.getElement();\n                        element.style.backgroundColor = \"#f8f9fa\";\n                        element.style.fontWeight = \"bold\";\n                        element.style.borderTop = \"2px solid #007bff\";\n                        element.style.cursor = \"pointer\";\n                        element.style.position = \"relative\";\n                        \n                        // Apply formatting after DOM is ready\n                        setTimeout(function() {\n                            var cells = row.getCells();\n                            if (cells.length > 0) {\n                                // Style the first cell to span full width\n                                var firstCellElement = cells[0].getElement();\n                                firstCellElement.style.position = \"absolute\";\n                                firstCellElement.style.left = \"0\";\n                                firstCellElement.style.right = \"0\";\n                                firstCellElement.style.width = \"100%\";\n                                firstCellElement.style.zIndex = \"10\";\n                                firstCellElement.style.backgroundColor = \"#f8f9fa\";\n                                firstCellElement.style.padding = \"8px 12px\";\n                                firstCellElement.style.borderTop = \"2px solid #007bff\";\n                                firstCellElement.innerHTML = '<span style=\"font-weight: bold; color: #007bff;\">' + \n                                                           data.groupTitle + '</span>';\n                                \n                                // Hide all other cells\n                                for (var i = 1; i < cells.length; i++) {\n                                    cells[i].getElement().style.visibility = \"hidden\";\n                                }\n                            }\n                        }, 10);\n                        \n                        // Click handler for separator\n                        element.onclick = function() {\n                            window.open(data.view_activity_url, '_blank');\n                        };\n                    }\n                }\n            });\n\n            // Double-click to edit entries\n            table.on(\"rowDblClick\", function(e, row) {\n                var data = row.getData();\n                if (!data.isSeparator) {\n                    window.open(data.edit_url, '_blank');\n                }\n            });\n\n            // Initialize selection tracking\n            this.initializeSelectionTracking();\n        },\n\n        /**\n         * OPTION 2: Initialize table with native Tabulator grouping\n         * @param {Array} userColumns User's field columns\n         * @param {Array} data Table data\n         */\n        initializeTableWithGrouping: function(userColumns, data) {\n            var self = this;\n\n            if (table) {\n                table.destroy();\n            }\n\n            var enhancedColumns = this.prepareColumnsForGrouping(userColumns);\n\n            // eslint-disable-next-line no-undef\n            table = new Tabulator(\"#valuemaps-table\", {\n                data: data,\n                columns: enhancedColumns,\n                layout: \"fitColumns\",\n                responsiveLayout: \"hide\",\n                placeholder: \"No entries found\",\n                pagination: \"local\",\n                paginationSize: 25,\n                paginationSizeSelector: [10, 25, 50, 100],\n                movableColumns: true,\n                resizableRows: false,\n                selectable: false,\n                tooltipsHeader: true,\n                \n                // Native grouping approach\n                groupBy: \"course_activity_group\",\n                groupHeader: function(value, count, data, group) {\n                    // Extract course and activity info from first item\n                    var firstItem = data[0];\n                    var viewUrl = firstItem.view_activity_url || (M.cfg.wwwroot + '/mod/valuemapdoc/view.php?id=' + firstItem.cmid);\n                    \n                    return '<span style=\"font-weight: bold; color: #007bff; cursor: pointer; display: block; padding: 8px; background: #f8f9fa; border-top: 2px solid #007bff;\" ' +\n                           'onclick=\"window.open(\\'' + viewUrl + '\\', \\'_blank\\')\" ' +\n                           'title=\"Click to open activity\">' +\n                           value + ' (' + count + ' entries)</span>';\n                },\n                groupStartOpen: true,\n                groupToggleElement: \"header\"\n            });\n\n            // Row double-click to edit\n            table.on(\"rowDblClick\", function(e, row) {\n                var data = row.getData();\n                window.open(data.edit_url, '_blank');\n            });\n\n            this.initializeSelectionTracking();\n        },\n\n        /**\n         * Initialize selection tracking for bulk operations\n         */\n        initializeSelectionTracking: function() {\n            var self = this;\n            \n            // Handle checkbox changes\n            $(document).on('change', '.entry-checkbox', function() {\n                var entryId = parseInt($(this).data('entry-id'));\n                var isChecked = $(this).prop('checked');\n                \n                if (isChecked) {\n                    if (selectedRows.indexOf(entryId) === -1) {\n                        selectedRows.push(entryId);\n                    }\n                } else {\n                    selectedRows = selectedRows.filter(function(id) {\n                        return id !== entryId;\n                    });\n                }\n                \n                self.updateSelectionUI();\n            });\n        },\n\n        /**\n         * Toggle row selection\n         * @param {Number} entryId Entry ID to toggle\n         */\n        toggleRowSelection: function(entryId) {\n            var checkbox = $('.entry-checkbox[data-entry-id=\"' + entryId + '\"]');\n            var isChecked = checkbox.prop('checked');\n            \n            checkbox.prop('checked', !isChecked);\n            \n            if (!isChecked) {\n                if (selectedRows.indexOf(entryId) === -1) {\n                    selectedRows.push(entryId);\n                }\n            } else {\n                selectedRows = selectedRows.filter(function(id) {\n                    return id !== entryId;\n                });\n            }\n            \n            this.updateSelectionUI();\n        },\n\n        /**\n         * Update selection UI for bulk operations\n         */\n        updateSelectionUI: function() {\n            var count = selectedRows.length;\n            var selectionInfo = $('.selection-info');\n            \n            if (count > 0) {\n                if (selectionInfo.length === 0) {\n                    $('.table-controls').prepend(\n                        '<div class=\"selection-info alert alert-info d-flex align-items-center me-2\">' +\n                        '<span class=\"selection-count\">' + count + '</span>' +\n                        '<span class=\"ms-1 me-2\">entries selected</span>' +\n                        '<button class=\"btn btn-sm btn-primary me-1\" id=\"bulk-export\">Export Selected</button>' +\n                        '<button class=\"btn btn-sm btn-outline-secondary\" id=\"clear-selection\">Clear</button>' +\n                        '</div>'\n                    );\n                    \n                    // Bind bulk actions\n                    $('#bulk-export').on('click', function() {\n                        this.exportSelected();\n                    }.bind(this));\n                    \n                    $('#clear-selection').on('click', function() {\n                        this.clearSelection();\n                    }.bind(this));\n                } else {\n                    selectionInfo.find('.selection-count').text(count);\n                }\n            } else {\n                selectionInfo.remove();\n            }\n        },\n\n        /**\n         * Apply filters to the table with cross-course context\n         */\n        applyFilters: function() {\n            if (!table) {\n                return;\n            }\n\n            // Clear existing filters\n            table.clearFilter();\n\n            // Get filter values\n            var courseFilter = $('#filter-course').val();\n            var activityFilter = $('#filter-activity').val();\n            var searchFilter = $('#search-entries').val();\n\n            // Apply course filter\n            if (courseFilter) {\n                table.addFilter(\"course_name\", \"=\", courseFilter);\n            }\n\n            // Apply activity filter\n            if (activityFilter) {\n                table.addFilter(\"activity_name\", \"=\", activityFilter);\n            }\n\n            // Apply search filter across multiple fields\n            if (searchFilter) {\n                table.addFilter([\n                    {field: \"market\", type: \"like\", value: searchFilter},\n                    {field: \"industry\", type: \"like\", value: searchFilter},\n                    {field: \"role\", type: \"like\", value: searchFilter},\n                    {field: \"businessgoal\", type: \"like\", value: searchFilter},\n                    {field: \"course_name\", type: \"like\", value: searchFilter},\n                    {field: \"activity_name\", type: \"like\", value: searchFilter},\n                    {field: \"username\", type: \"like\", value: searchFilter}\n                ]);\n            }\n        },\n\n        /**\n         * Clear all filters\n         */\n        clearFilters: function() {\n            if (!table) {\n                return;\n            }\n\n            table.clearFilter();\n            $('#filter-course').val('');\n            $('#filter-activity').val('');\n            $('#search-entries').val('');\n        },\n\n        /**\n         * Clear selection\n         */\n        clearSelection: function() {\n            selectedRows = [];\n            $('.entry-checkbox').prop('checked', false);\n            $('.selection-info').remove();\n        },\n\n        /**\n         * Export selected entries\n         */\n        exportSelected: function() {\n            if (!table || selectedRows.length === 0) {\n                return;\n            }\n\n            // Filter table data to selected entries\n            var selectedData = table.getData().filter(function(row) {\n                return selectedRows.indexOf(row.id) !== -1;\n            });\n\n            // Create temporary table for export\n            var tempDiv = $('<div id=\"temp-export-table\" style=\"display: none;\"></div>');\n            $('body').append(tempDiv);\n\n            // eslint-disable-next-line no-undef\n            var tempTable = new Tabulator(\"#temp-export-table\", {\n                data: selectedData,\n                columns: this.prepareColumns([]), // Reuse column config\n                layout: \"fitData\"\n            });\n\n            // Export and cleanup\n            tempTable.download(\"csv\", \"selected-valuemap-entries.csv\");\n            setTimeout(function() {\n                tempTable.destroy();\n                tempDiv.remove();\n            }, 1000);\n        },\n\n        /**\n         * Show export options\n         */\n        showExportOptions: function() {\n            if (!table) {\n                return;\n            }\n\n            // Simple export all visible data\n            table.download(\"csv\", \"valuemap-entries-\" + new Date().toISOString().split('T')[0] + \".csv\");\n        },\n\n        /**\n         * Toggle fullscreen mode\n         */\n        toggleFullscreen: function() {\n            var container = $('#valuemaps-container');\n            container.toggleClass('fullscreen');\n\n            if (table) {\n                setTimeout(function() {\n                    table.redraw();\n                }, 100);\n            }\n        },\n\n        /**\n         * Show loading state\n         */\n        showLoadingState: function() {\n            $('#loading-state').show();\n            $('#table-state').hide();\n            $('#empty-state').hide();\n            $('#error-state').hide();\n        },\n\n        /**\n         * Show table state\n         */\n        showTableState: function() {\n            $('#loading-state').hide();\n            $('#table-state').show();\n            $('#empty-state').hide();\n            $('#error-state').hide();\n        },\n\n        /**\n         * Show empty state\n         */\n        showEmptyState: function() {\n            $('#loading-state').hide();\n            $('#table-state').hide();\n            $('#empty-state').show();\n            $('#error-state').hide();\n        },\n\n        /**\n         * Show error state\n         * @param {String} message Error message to display\n         */\n        showErrorState: function(message) {\n            $('#loading-state').hide();\n            $('#table-state').hide();\n            $('#empty-state').hide();\n            $('#error-state').show();\n            $('#error-message').text(message || 'An error occurred while loading data.');\n        }\n    };\n});"],"names":["define","$","Ajax","Notification","table","config","window","valuemapsConfig","allData","selectedRows","currentStatistics","init","columnsElement","document","querySelector","textContent","columns","JSON","parse","e","showErrorState","Array","isArray","waitForTabulator","self","this","Tabulator","bindEvents","loadData","setTimeout","on","showExportOptions","clearFilters","applyFilters","toggleFullscreen","showLoadingState","call","methodname","args","userid","page","limit","done","data","entries","statistics","console","log","length","updateStatistics","populateFilterOptions","groupedData","processDataWithNativeGrouping","initializeTableWithGrouping","showTableState","showEmptyState","fail","error","message","exception","buildUserColumns","userFields","levelConfig","fieldTitles","forEach","fieldName","push","title","field","hozAlign","headerSort","width","headerFilter","headerFilterPlaceholder","processDataWithGroupSeparators","processedData","currentGroup","sort","a","b","course_name","localeCompare","activity_name","timemodified","entry","groupKey","id","isSeparator","groupTitle","course_shortname","cmid","course_id","activity_id","view_activity_url","M","cfg","wwwroot","course_url","course_activity_group","edit_url","stats","text","total_entries","unique_courses","unique_activities","courseSelect","find","remove","courses_list","course","append","activitySelect","activities_list","activity","prepareColumns","userColumns","enhancedColumns","formatter","cell","getRow","getData","cellClick","stopPropagation","toggleRowSelection","col","editable","prepareColumnsForGrouping","initializeTable","destroy","layout","responsiveLayout","placeholder","pagination","paginationSize","paginationSizeSelector","movableColumns","resizableRows","selectable","tooltipsHeader","rowFormatter","row","element","getElement","style","backgroundColor","fontWeight","borderTop","cursor","position","cells","getCells","firstCellElement","left","right","zIndex","padding","innerHTML","i","visibility","onclick","open","initializeSelectionTracking","groupBy","groupHeader","value","count","group","firstItem","groupStartOpen","groupToggleElement","entryId","parseInt","prop","indexOf","filter","updateSelectionUI","checkbox","isChecked","selectionInfo","prepend","exportSelected","bind","clearSelection","clearFilter","courseFilter","val","activityFilter","searchFilter","addFilter","type","selectedData","tempDiv","tempTable","download","Date","toISOString","split","toggleClass","redraw","show","hide"],"mappings":"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"}